<script src='/assets/js/berryApp.js'></script> 
    <script src='/assets/js/lib.js'></script> 

<script>
  $('[href$="/{{ $app->slug }}"]').parent().addClass('active').parent().addClass('in');
  // var opts = {
  //   $el: $('#app-container'),
  //   data:{{{data_json}}},
  //   config: {{{app.app.code_json}}},
  //   crud: function(name, data, callback, verb){
  //         $.ajax({
  //         url: '/api/app_data/{{ app.id }}/' +name+ '?verb='+verb,
  //         type: 'POST',
  //         data: {request: data},
  //         error: function (data) {
  //           if(data.responseJSON.error) {
  //             toastr.error(data.responseJSON.error.message || data.responseJSON.error,'ERROR')
  //           }else{
  //             toastr.error(data.statusText, 'ERROR')
  //           }
  //         }.bind(this),
  //         success  : callback.bind(this),
  //       });
  //   }
  // }
  // if(typeof opts.data.user.id === 'undefined') {
  //   opts.data.user.options =  (Lockr.get('/api/apps/instances/{{ app.id }}/user_options') || {options:{}}).options;
  // }
  appMode = true;
  $('#edit_instance').on('click', function(){
    $().berry($.extend(true, {legend:'Edit Options', attributes: cb.collections[0].getItems()[0].bae.data.user.options},JSON.parse(_.find(cb.collections[0].getItems()[0].bae.options.config.forms,{name:'User Options'}).content))).on('save', function(){
      var url = '/api/apps/instances/{{ app.id }}/user_options';
      if(typeof cb.collections[0].getItems()[0].bae.data.user.id !== 'undefined') { // what is this??
        $.ajax({
          type: 'POST',
          url:url,
          data: {'options': this.toJSON()},
          success:function(data){
            cb.collections[0].getItems()[0].bae.app.update({user:{options:data.options}});
            cb.collections[0].getItems()[0].bae.optionsupdated();
            this.trigger('close');
            toastr.success('', 'Options Updated Successfully');
          }.bind(this),
          error:function(data){
              toastr.error(data.statusText, 'An error occured updating options')
          }
        })
      }else{
        cb.collections[0].getItems()[0].bae.app.update({user:{options:this.toJSON()}});
        Lockr.set(url, {'options': this.toJSON()})
        this.trigger('close');
        toastr.success('', 'Options Updated Successfully');
      }

    })

    
  })

  // $('body').append('<style>'+opts.config.css+'</style>');

  // bae = new berryAppEngine(opts);
  
  // var refetch = function(data){
  //   $.ajax({
  //     type: 'GET',
  //     url:'/api/fetch/{{ app.id }}',
  //     success:function(data){
  //       this.app.update(data);
  //       toastr.success('', 'Data refetch Successfully');
  //     }.bind(this),
  //     error:function(data){
  //         toastr.error(data.statusText, 'An error occured updating App')
  //     }
  //   })
  // }
  // bae.app.on('refetch', refetch) 

  
  // var reload = function(data){
  //   if(typeof bae !== 'undefined'){
  //     bae.destroy();
  //     delete bae;
  //   }
  //   $.ajax({
  //     type: 'GET',
  //     url:'/api/fetch/{{ app.id }}',
  //     success:function(data){
  //       opts.data = data;
  //       bae = new berryAppEngine(opts);
  //       bae.app.on('reload', refetch)
  //       toastr.success('', 'App Updated Successfully');
  //     }.bind(this),
  //     error:function(data){
  //         toastr.error(data.statusText, 'An error occured updating App')
  //     }
  //   })
  // }
  // bae.app.on('reload', reload) 


</script> 